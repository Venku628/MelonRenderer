#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "random.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties
{
mat4 view;
mat4 projection;
mat4 viewInverse;
mat4 projectionInverse;
} cam;

layout(location = 0) rayPayloadNV hitPayload prd;

layout(push_constant) uniform Constants
{
  vec4  clearColor;
  vec3  lightPosition;
  float lightIntensity;
  int   samples;
} pushC;


void main() 
{
    // Initialize the random number
    uint seed = tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, pushC.samples);
    vec3 hitValues = vec3(0);

    for(int i = 0; i < pushC.samples; i++)
    {
        float r1 = rnd(seed);
        float r2 = rnd(seed);
        // Subpixel jitter: send the ray through a different position inside the pixel
        // each time, to provide antialiasing.
        vec2 subpixel_jitter = i == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);


        //center the coordinates of pixels to their middle, to be able to transform to real camera coordinates
        const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + subpixel_jitter; //previously + vec2(0.5);
        //mapping pixel to [0, 1] in u and v
        const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeNV.xy);
        //map to [-1, 1] in u and v, like it is the case in camera space
        vec2 d = inUV * 2.0 - 1.0;

        vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
        vec4 target = cam.projectionInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

        uint rayFlags = gl_RayFlagsOpaqueNV;
        float distanceMin = 0.001;
        float distanceMax = 100000.0;

        prd.depth       = 0;
        prd.hitValue    = vec3(0);
        prd.attenuation = vec3(1.f, 1.f, 1.f);
        prd.done = 1;
        prd.rayOrigin = origin.xyz;
        prd.rayDir = direction.xyz;

        vec3 hitValue = vec3(0);
        for(;;)
        {
            traceNV(topLevelAS,
                rayFlags,
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                origin.xyz,     // ray origin
                distanceMin,           // ray min range
                direction.xyz,  // ray direction
                distanceMax,           // ray max range
                0               // payload (location = 0)
                );

            hitValue += prd.hitValue * prd.attenuation;

            prd.depth++;
            if(prd.done == 1 || prd.depth >= 10)
                break;

            origin.xyz    = prd.rayOrigin;
            direction.xyz = prd.rayDir;
            prd.done      = 1; // Will stop if a reflective material isn't hit
        }

        hitValues += hitValue;
    }
    hitValues = hitValues / pushC.samples;

    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hitValues.zyx, 1.0));
}
